import com.benasher44.uuid.Uuid;
import kotlinx.datetime.LocalDate;
import tech.alexib.yaba.model.TransactionType;

CREATE TABLE TransactionEntity (
id TEXT AS Uuid NOT NULL PRIMARY KEY ON CONFLICT REPLACE,
name TEXT NOT NULL,
type TEXT AS TransactionType NOT NULL,
amount REAL AS Double NOT NULL,
date INTEGER AS LocalDate NOT NULL,
account_id TEXT AS Uuid NOT NULL,
item_id TEXT AS Uuid NOT NULL,
category TEXT,
subcategory TEXT,
iso_currency_code TEXT,
pending INTEGER AS Boolean DEFAULT 1,
merchant_name TEXT,
CONSTRAINT fk_transaction_account
FOREIGN KEY(account_id) REFERENCES AccountEntity(id)
ON DELETE CASCADE
ON UPDATE CASCADE,
CONSTRAINT fk_transaction_item
FOREIGN KEY(item_id) REFERENCES ItemEntity(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);


CREATE VIEW UserTransaction
AS
SELECT
    t.id,
    t.account_id,
    t.item_id,
    a.user_id,
    t.category,
    t.subcategory,
    t.type,
    t.name,
    t.merchant_name,
    t.date,
    t.amount,
    t.iso_currency_code,
    t.pending
FROM TransactionEntity t
           LEFT JOIN UserAccount a ON t.account_id = a.id;

CREATE VIEW UserTransactionDetail
AS
SELECT
    t.id,
    t.account_id,
    t.item_id,
    a.user_id,
    t.category,
    t.subcategory,
    t.type,
    t.name,
    t.iso_currency_code,
    t.date,
    t.amount,
    t.pending,
    t.merchant_name,
    a.name AS accountName,
    a.mask,
    a.institutionName
FROM
    TransactionEntity t
        LEFT JOIN UserAccount a ON t.account_id = a.id;

insert:
INSERT OR REPLACE INTO TransactionEntity
VALUES ?;

selectAll:
SELECT *
FROM UserTransaction
WHERE user_id = ?
ORDER BY date DESC;


selectRecent:
SELECT *
FROM UserTransaction
WHERE user_id = ?
ORDER BY date DESC
LIMIT 5;

selectById:
SELECT *
FROM UserTransactionDetail
WHERE id = ?;

selectAllByAccountIdWithDetail:
SELECT *
FROM UserTransactionDetail
WHERE account_id = ?
ORDER BY date DESC;

selectAllByAccount:
SELECT *
FROM UserTransaction
WHERE account_id = ?
ORDER BY date DESC;

selectByItemId:
SELECT *
FROM UserTransactionDetail
WHERE item_id = ?
ORDER BY date DESC;

count:
SELECT COUNT(*) FROM UserTransaction
WHERE user_id = ?;

deleteByItemId:
DELETE FROM TransactionEntity
WHERE item_id = ?;

deleteByAccontId:
DELETE FROM TransactionEntity
WHERE account_id = ?;

deleteById:
DELETE FROM TransactionEntity
WHERE id = ?;

selectAllByName:
SELECT * FROM UserTransaction
WHERE user_id = :userId
AND merchant_name LIKE ('%' || :query || '%')
OR name LIKE ('%' || :query || '%')
ORDER BY date DESC;

spendingCategoriesByDate:
SELECT category, SUM(amount) AS amount
FROM UserTransaction
WHERE user_id = :userId
AND date BETWEEN :date1 AND :date2
GROUP BY category;
